
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000213  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d8  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bb  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ea  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000081  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000138  00000000  00000000  000007b3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
void main() 
  { DDRB=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
DDRA=0xf0;
  96:	80 ef       	ldi	r24, 0xF0	; 240
  98:	8a bb       	out	0x1a, r24	; 26
while(1)
 {
  if(PINC==(0x02))
   { PORTB=0b00001010;_delay_us(60);
  9a:	fa e0       	ldi	r31, 0x0A	; 10
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9c:	30 ea       	ldi	r19, 0xA0	; 160

  else if(PINC==0x00)
  { PORTB=0b00000110;_delay_us(2000);}

 else if(PINC==0x07)
  { PORTB=0b00000110;_delay_us(1000);}
  9e:	26 e0       	ldi	r18, 0x06	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	60 ed       	ldi	r22, 0xD0	; 208
  a2:	77 e0       	ldi	r23, 0x07	; 7
  if(PINC==(0x02))
   { PORTB=0b00001010;_delay_us(60);
  }

   if(PINC==((0x03)||(0x01)))
   { PORTB=0b00001001;_delay_us(60);
  a4:	40 ea       	ldi	r20, 0xA0	; 160
  a6:	5f e0       	ldi	r21, 0x0F	; 15
  a8:	e9 e0       	ldi	r30, 0x09	; 9
void main() 
  { DDRB=0xff;
DDRA=0xf0;
while(1)
 {
  if(PINC==(0x02))
  aa:	83 b3       	in	r24, 0x13	; 19
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	21 f4       	brne	.+8      	; 0xb8 <main+0x26>
   { PORTB=0b00001010;_delay_us(60);
  b0:	f8 bb       	out	0x18, r31	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b2:	83 2f       	mov	r24, r19
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x22>
  }

   if(PINC==((0x03)||(0x01)))
  b8:	83 b3       	in	r24, 0x13	; 19
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x30>
   { PORTB=0b00001001;_delay_us(60);
  be:	e8 bb       	out	0x18, r30	; 24
  c0:	04 c0       	rjmp	.+8      	; 0xca <main+0x38>
  }

  else if(PINC==((0x06)||(0x04)))
  c2:	83 b3       	in	r24, 0x13	; 19
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	29 f4       	brne	.+10     	; 0xd2 <main+0x40>
  { PORTB=0b00000110;_delay_us(60);
  c8:	28 bb       	out	0x18, r18	; 24
  ca:	83 2f       	mov	r24, r19
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x3a>
  d0:	ec cf       	rjmp	.-40     	; 0xaa <main+0x18>
  }

  else if(PINC==0x00)
  d2:	83 b3       	in	r24, 0x13	; 19
  d4:	88 23       	and	r24, r24
  d6:	19 f4       	brne	.+6      	; 0xde <main+0x4c>
  { PORTB=0b00000110;_delay_us(2000);}
  d8:	28 bb       	out	0x18, r18	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	ca 01       	movw	r24, r20
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <main+0x56>

 else if(PINC==0x07)
  de:	83 b3       	in	r24, 0x13	; 19
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	19 f7       	brne	.-58     	; 0xaa <main+0x18>
  { PORTB=0b00000110;_delay_us(1000);}
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	cb 01       	movw	r24, r22
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x56>
  ec:	de cf       	rjmp	.-68     	; 0xaa <main+0x18>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
